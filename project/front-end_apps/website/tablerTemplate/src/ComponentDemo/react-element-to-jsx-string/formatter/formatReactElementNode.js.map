{"version":3,"sources":["../../src/formatter/formatReactElementNode.js"],"names":["compensateMultilineStringElementIndentation","element","formattedElement","inline","lvl","options","tabStop","type","split","map","line","offset","join","formatOneChildren","onlyPropsWithOriginalValue","defaultProps","props","haveDefaultValue","Object","keys","includes","propName","isInlineAttributeTooLong","attributes","inlineAttributeString","maxInlineAttributesLineLength","length","shouldRenderMultilineAttr","containsMultilineAttr","node","displayName","childrens","Error","filterProps","showDefaultProps","sortProps","out","outInlineAttr","outMultilineAttr","visibleAttributeNames","filter","indexOf","forEach","push","defaultPropName","sort","attributeName","attributeFormattedInline","attributeFormattedMultiline","isMultilineAttribute","newLvl","reduce"],"mappings":"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","file":"formatReactElementNode.js","sourcesContent":["/* @flow */\n\nimport spacer from './spacer';\nimport formatTreeNode from './formatTreeNode';\nimport formatProp from './formatProp';\nimport mergeSiblingPlainStringChildrenReducer from './mergeSiblingPlainStringChildrenReducer';\nimport propNameSorter from './propNameSorter';\nimport type { Options } from './../options';\nimport type { ReactElementTreeNode } from './../tree';\n\nconst compensateMultilineStringElementIndentation = (\n  element,\n  formattedElement: string,\n  inline: boolean,\n  lvl: number,\n  options: Options\n) => {\n  const { tabStop } = options;\n\n  if (element.type === 'string') {\n    return formattedElement\n      .split('\\n')\n      .map((line, offset) => {\n        if (offset === 0) {\n          return line;\n        }\n\n        return `${spacer(lvl, tabStop)}${line}`;\n      })\n      .join('\\n');\n  }\n\n  return formattedElement;\n};\n\nconst formatOneChildren = (\n  inline: boolean,\n  lvl: number,\n  options: Options\n) => element =>\n  compensateMultilineStringElementIndentation(\n    element,\n    formatTreeNode(element, inline, lvl, options),\n    inline,\n    lvl,\n    options\n  );\n\nconst onlyPropsWithOriginalValue = (defaultProps, props) => propName => {\n  const haveDefaultValue = Object.keys(defaultProps).includes(propName);\n  return (\n    !haveDefaultValue ||\n    (haveDefaultValue && defaultProps[propName] !== props[propName])\n  );\n};\n\nconst isInlineAttributeTooLong = (\n  attributes: string[],\n  inlineAttributeString: string,\n  lvl: number,\n  tabStop: number,\n  maxInlineAttributesLineLength: ?number\n): boolean => {\n  if (!maxInlineAttributesLineLength) {\n    return attributes.length > 1;\n  }\n\n  return (\n    spacer(lvl, tabStop).length + inlineAttributeString.length >\n    maxInlineAttributesLineLength\n  );\n};\n\nconst shouldRenderMultilineAttr = (\n  attributes: string[],\n  inlineAttributeString: string,\n  containsMultilineAttr: boolean,\n  inline: boolean,\n  lvl: number,\n  tabStop: number,\n  maxInlineAttributesLineLength: ?number\n): boolean =>\n  (isInlineAttributeTooLong(\n    attributes,\n    inlineAttributeString,\n    lvl,\n    tabStop,\n    maxInlineAttributesLineLength\n  ) ||\n    containsMultilineAttr) &&\n  !inline;\n\nexport default (\n  node: ReactElementTreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const {\n    type,\n    displayName = '',\n    childrens,\n    props = {},\n    defaultProps = {},\n  } = node;\n\n  if (type !== 'ReactElement') {\n    throw new Error(\n      `The \"formatReactElementNode\" function could only format node of type \"ReactElement\". Given:  ${\n        type\n      }`\n    );\n  }\n\n  const {\n    filterProps,\n    maxInlineAttributesLineLength,\n    showDefaultProps,\n    sortProps,\n    tabStop,\n  } = options;\n\n  let out = `<${displayName}`;\n\n  let outInlineAttr = out;\n  let outMultilineAttr = out;\n  let containsMultilineAttr = false;\n\n  const visibleAttributeNames = [];\n\n  Object.keys(props)\n    .filter(propName => filterProps.indexOf(propName) === -1)\n    .filter(onlyPropsWithOriginalValue(defaultProps, props))\n    .forEach(propName => visibleAttributeNames.push(propName));\n\n  Object.keys(defaultProps)\n    .filter(defaultPropName => filterProps.indexOf(defaultPropName) === -1)\n    .filter(() => showDefaultProps)\n    .filter(defaultPropName => !visibleAttributeNames.includes(defaultPropName))\n    .forEach(defaultPropName => visibleAttributeNames.push(defaultPropName));\n\n  const attributes = visibleAttributeNames.sort(propNameSorter(sortProps));\n\n  attributes.forEach(attributeName => {\n    const {\n      attributeFormattedInline,\n      attributeFormattedMultiline,\n      isMultilineAttribute,\n    } = formatProp(\n      attributeName,\n      Object.keys(props).includes(attributeName),\n      props[attributeName],\n      Object.keys(defaultProps).includes(attributeName),\n      defaultProps[attributeName],\n      inline,\n      lvl,\n      options\n    );\n\n    if (isMultilineAttribute) {\n      containsMultilineAttr = true;\n    }\n\n    outInlineAttr += attributeFormattedInline;\n    outMultilineAttr += attributeFormattedMultiline;\n  });\n\n  outMultilineAttr += `\\n${spacer(lvl, tabStop)}`;\n\n  if (\n    shouldRenderMultilineAttr(\n      attributes,\n      outInlineAttr,\n      containsMultilineAttr,\n      inline,\n      lvl,\n      tabStop,\n      maxInlineAttributesLineLength\n    )\n  ) {\n    out = outMultilineAttr;\n  } else {\n    out = outInlineAttr;\n  }\n\n  if (childrens && childrens.length > 0) {\n    const newLvl = lvl + 1;\n\n    out += '>';\n\n    if (!inline) {\n      out += '\\n';\n      out += spacer(newLvl, tabStop);\n    }\n\n    out += childrens\n      .reduce(mergeSiblingPlainStringChildrenReducer, [])\n      .map(formatOneChildren(inline, newLvl, options))\n      .join(!inline ? `\\n${spacer(newLvl, tabStop)}` : '');\n\n    if (!inline) {\n      out += '\\n';\n      out += spacer(newLvl - 1, tabStop);\n    }\n    out += `</${displayName}>`;\n  } else {\n    if (\n      !isInlineAttributeTooLong(\n        attributes,\n        outInlineAttr,\n        lvl,\n        tabStop,\n        maxInlineAttributesLineLength\n      )\n    ) {\n      out += ' ';\n    }\n\n    out += '/>';\n  }\n\n  return out;\n};\n"]}